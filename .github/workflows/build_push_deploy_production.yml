name: build_push_deploy_production

on:
  push:
    branches:
      - main

  workflow_dispatch:
    inputs:
      reason:
        description: "Reason for manual build and deploy"
        required: true

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo code
        uses: actions/checkout@v4

      - name: Run unit tests
        run: make test

  build_and_push:
    runs-on: ubuntu-latest
    environment: Production
    needs: test
    steps:
      - name: Checkout repo code
        uses: actions/checkout@v4

      - name: Configure Docker metadata
        uses: docker/metadata-action@v5
        id: meta
        with:
          images: |
            ${{ vars.CONTAINER_REGISTRY }}/${{ vars.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ github.sha }}
            type=raw,value=latest

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build web image
        uses: docker/build-push-action@v5
        with:
          push: false
          load: true
          file: build/package/Dockerfile.web
          context: .
          tags: ${{ steps.meta.outputs.tags }}

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.API_TOKEN }}

      - name: Login to container registry
        run: doctl registry login

      - name: Push image to container registry
        run: |
          docker push ${{ vars.CONTAINER_REGISTRY }}/${{ vars.IMAGE_NAME }}:${{ github.sha }}
          docker push ${{ vars.CONTAINER_REGISTRY }}/${{ vars.IMAGE_NAME }}:latest

  deploy:
    runs-on: ubuntu-latest
    environment: Production
    needs: build_and_push
    steps:
      - name: Deploy on Digital Ocean Droplet
        uses: appleboy/ssh-action@v1.0.0
        env:
          API_TOKEN: ${{ secrets.API_TOKEN }}
        with:
          host: ${{ secrets.DROPLET_HOST }}
          username: ${{ secrets.DROPLET_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          envs: "{{ secrets.API_TOKEN }}"
          script: |
            docker login -u $API_TOKEN -p $API_TOKEN registry.digitalocean.com
            cd nixpigweb \
              && git pull \
              && docker compose -f deploy/docker-compose.yml up -d --build web
