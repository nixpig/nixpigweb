name: build_push_deploy_production

on:
  push:
    branches:
      - main

  workflow_dispatch:
    inputs:
      reason:
        description: "Reason for manual build and deploy"
        required: true

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo code
        uses: actions/checkout@v4

      - name: Run unit tests
        run: make test

  build_and_push:
    runs-on: ubuntu-latest
    environment: Production
    needs: test
    steps:
      - name: Checkout repo code
        uses: actions/checkout@v4

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure 'web' metadata
        uses: docker/metadata-action@v5
        id: web_meta
        with:
          images: |
            ${{ vars.CONTAINER_REGISTRY }}/${{ vars.WEB_IMAGE_NAME }}
          tags: |
            type=raw,value=${{ github.sha }}
            type=raw,value=latest

      - name: Build 'web' image
        uses: docker/build-push-action@v5
        with:
          push: false
          load: true
          file: build/package/Dockerfile.web
          context: .
          tags: ${{ steps.web_meta.outputs.tags }}

      - name: Configure 'admin' metadata
        uses: docker/metadata-action@v5
        id: admin_meta
        with:
          images: |
            ${{ vars.CONTAINER_REGISTRY }}/${{ vars.ADMIN_IMAGE_NAME }}
          tags: |
            type=raw,value=${{ github.sha }}
            type=raw,value=latest

      - name: Build 'admin' image
        uses: docker/build-push-action@v5
        with:
          push: false
          load: true
          file: build/package/Dockerfile.admin
          context: .
          tags: ${{ steps.admin_meta.outputs.tags }}

      - name: Configure 'api' metadata
        uses: docker/metadata-action@v5
        id: api_meta
        with:
          images: |
            ${{ vars.CONTAINER_REGISTRY }}/${{ vars.API_IMAGE_NAME }}
          tags: |
            type=raw,value=${{ github.sha }}
            type=raw,value=latest

      - name: Build 'api' image
        uses: docker/build-push-action@v5
        with:
          push: false
          load: true
          file: build/package/Dockerfile.api
          context: .
          tags: ${{ steps.api_meta.outputs.tags }}

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.API_TOKEN }}

      - name: Login to container registry
        run: doctl registry login

      - name: push 'web' images to container registry
        run: |
          docker push ${{ vars.container_registry }}/${{ vars.web_image_name }}:${{ github.sha }}
          docker push ${{ vars.container_registry }}/${{ vars.web_image_name }}:latest

      - name: push 'admin' images to container registry
        run: |
          docker push ${{ vars.container_registry }}/${{ vars.admin_image_name }}:${{ github.sha }}
          docker push ${{ vars.container_registry }}/${{ vars.admin_image_name }}:latest

      - name: push 'api' images to container registry
        run: |
          docker push ${{ vars.container_registry }}/${{ vars.api_image_name }}:${{ github.sha }}
          docker push ${{ vars.container_registry }}/${{ vars.api_image_name }}:latest

  deploy:
    runs-on: ubuntu-latest
    environment: Production
    needs: build_and_push
    steps:
      - name: Checkout repo code
        uses: actions/checkout@v4

      - name: Copy deployment files to Droplet
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.DROPLET_HOST }}
          username: ${{ secrets.DROPLET_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          source: "deploy/docker-compose.yml,deploy/default.conf.template"
          target: /home/nixpig
          overwrite: true
          strip_components: 1

      - name: Deploy on Droplet
        uses: appleboy/ssh-action@v1.0.0
        env:
          API_TOKEN: ${{ secrets.API_TOKEN }}
          CONTAINER_REGISTRY: ${{ vars.CONTAINER_REGISTRY }}
          WEB_IMAGE_NAME: ${{ vars.WEB_IMAGE_NAME }}
          ADMIN_IMAGE_NAME: ${{ vars.ADMIN_IMAGE_NAME }}
          API_IMAGE_NAME: ${{ vars.API_IMAGE_NAME }}
        with:
          host: ${{ secrets.DROPLET_HOST }}
          username: ${{ secrets.DROPLET_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          envs: API_TOKEN,CONTAINER_REGISTRY,WEB_IMAGE_NAME,ADMIN_IMAGE_NAME,API_IMAGE_NAME
          script: |
            docker login -u $API_TOKEN -p $API_TOKEN registry.digitalocean.com \
              && docker pull $CONTAINER_REGISTRY/$WEB_IMAGE_NAME:latest \
              && docker pull $CONTAINER_REGISTRY/$ADMIN_IMAGE_NAME:latest \
              && docker pull $CONTAINER_REGISTRY/$API_IMAGE_NAME:latest \
              && docker compose -f docker-compose.yml up -d --build
